#!/usr/bin/env python

import os
import subprocess

# Set up environment
variables = Variables()
variables.AddVariables(
    PathVariable(
        'BUILD_DIR',
        "Build directory",
        'build',
        PathVariable.PathIsDirCreate,
    ),
    PathVariable(
        'TEST_BUILD_DIR',
        "Build directory for unit tests",
        'build/tests',
        PathVariable.PathIsDirCreate,
    ),
    PathVariable(
        'BIN_DIR',
        "Directory to place programs",
        'bin',
        PathVariable.PathIsDirCreate,
    ),
    BoolVariable(
        'debug',
        "Whether this is a debug build",
        False,
    ),
    BoolVariable(
        'SSE2',
        "Use Intel SSE2 to optimize triangle intersection",
        True,
    )
)
env = Environment(
    TOOLS=['default', 'go'],
    GOSTRIPTESTS=True,
    variables=variables,
)
Help(variables.GenerateHelpText(env))

test_env = env.Clone()
test_env['GOSTRIPTESTS'] = False
test_env['BUILD_DIR'] = test_env['TEST_BUILD_DIR']

def setup_paths(e):
    e.Append(GOLIBPATH=[e['BUILD_DIR']])
    e.VariantDir(e['BUILD_DIR'], 'src')

setup_paths(env)
setup_paths(test_env)

if env['debug']:
    env.Append(GO_LDFLAGS=['-e'])
else:
    env.Append(GO_LDFLAGS=['-s'])

# Version info
def get_bzr_path():
    for path in os.environ['PATH'].split(os.path.pathsep):
        path = os.path.join(path, 'bzr')
        if os.path.exists(path):
            return path
    return None

def generate_buildversion(env, target, source):
    template = """\
// This file is automatically generated.
// DO NOT EDIT.
package buildversion

const Source = "bzr"
const RevNo = "{revno}"
const RevID = "{revision_id}"
const BranchNickname = "{branch_nick}"
const CleanWC = {clean}
"""
    bzr_path = get_bzr_path()
    f = open(str(target[0]), 'w')
    try:
        if bzr_path:
            subprocess.call([bzr_path, 'version-info', '--custom', '--template', template], stdout=f)
        else:
            template = template.replace('{revno}', 'archive')
            template = template.replace('{revision_id}', 'archive')
            template = template.replace('{branch_nick}', 'archive')
            template = template.replace('{clean}', '1')
            template = template.replace('bzr', 'archive')
            f.write(template)
    finally:
        f.close()

version_file = File(env.subst('$BUILD_DIR/buildversion.go'))
Command(version_file, [], generate_buildversion)
AlwaysBuild(version_file)

env.Go(version_file)

def get_objs(e):
    lib_objects = SConscript(
        'src/goray/SConscript',
        exports={'env': e},
        variant_dir=e.subst('$BUILD_DIR/goray'),
    )
    return lib_objects

# Main build
l = get_objs(env)
Alias('lib', l)
program = env.GoProgram(env.subst('$BIN_DIR/goray'), env.subst('$BUILD_DIR/main.go'))

Default(program)

# Test build
test_suite = test_env.GoProgram(
    test_env.subst('$BIN_DIR/tests'),
    test_env.GoTest(test_env.subst('$BUILD_DIR/tests.go'), get_objs(test_env))
)

Alias('tests', test_suite)
