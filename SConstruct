#!/usr/bin/env python

import os
import subprocess

# Set up environment
variables = Variables()
variables.AddVariables(
    PathVariable(
        'BUILD_DIR',
        "Build directory",
        'build',
        PathVariable.PathIsDirCreate,
    ),
    PathVariable(
        'TEST_BUILD_DIR',
        "Build directory for unit tests",
        'build/tests',
        PathVariable.PathIsDirCreate,
    ),
    PathVariable(
        'BIN_DIR',
        "Directory to place programs",
        'bin',
        PathVariable.PathIsDirCreate,
    ),
    BoolVariable(
        'debug',
        "Whether this is a debug build",
        False,
    ),
    BoolVariable(
        'SSE2',
        "Use Intel SSE2 to optimize triangle intersection",
        True,
    ),
    BoolVariable(
        'show_commands',
        "Show actual commands being executed during build",
        False,
    ),
)
env = Environment(
    TOOLS=['default', 'go'],
    GO_STRIPTESTS=True,
    variables=variables,
)
Help(variables.GenerateHelpText(env))
if not env['show_commands']:
    env.Append(
        GO_GCCOMSTR='  GC ${SOURCES.srcpath}',
        GO_LDCOMSTR='  LD -o $TARGET ${SOURCE.srcpath}',
        GO_ACOMSTR=' ASM ${SOURCE.srcpath}',
        GO_PACKCOMSTR='PACK > $TARGET',
        GO_TESTCOMSTR='TEST > $TARGET',
    )

test_env = env.Clone()
test_env['GO_STRIPTESTS'] = False
test_env['BUILD_DIR'] = test_env['TEST_BUILD_DIR']


def setup_paths(e):
    e.Append(GO_LIBPATH=[e['BUILD_DIR']])
    e.VariantDir(e['BUILD_DIR'], 'src')

setup_paths(env)
setup_paths(test_env)

if env['debug']:
    env.Append(GO_LDFLAGS=['-e'])
else:
    env.Append(GO_LDFLAGS=['-s'])

# Version info
def get_hg_path():
    for path in os.environ['PATH'].split(os.path.pathsep):
        path = os.path.join(path, 'hg')
        if os.path.exists(path):
            return path
    return None

def generate_buildversion(env, target, source):
    hg_path = get_hg_path()
    try:
        f = open(str(target[0]), 'w')
        print >> f, "// This file is automatically generated."
        print >> f, "// DO NOT EDIT."
        print >> f, "package buildversion"
        print >> f
        if hg_path is not None and os.path.exists('.hg'):
            out, _ = subprocess.Popen([hg_path, 'identify', '--id', '--num'], stdout=subprocess.PIPE).communicate()
            revid, revno = out.split()
            clean = not revid.endswith('+')
            if not clean:
                revid = revid[:-1]
                revno = revno[:-1]
            print >> f, 'const Source = "hg"'
            print >> f, 'const RevNo = "%s"' % (revno)
            print >> f, 'const RevID = "%s"' % (revid)
            print >> f, 'const CleanWC = ' + ('true' if clean else 'false')
        else:
            print >> f, 'const Source = "archive"'
            print >> f, 'const RevNo = ""'
            print >> f, 'const RevID = ""'
            print >> f, 'const CleanWC = true'
    finally:
        f.close()

version_file = File(env.subst('$BUILD_DIR/buildversion.go'))
Command(version_file, [], Action(generate_buildversion, 'buildversion.go > $TARGET'))
AlwaysBuild(version_file)

env.Go(version_file)

def get_objs(e):
    lib_objects = SConscript(
        'src/goray/SConscript',
        exports={'env': e},
        variant_dir=e.subst('$BUILD_DIR/goray'),
    )
    return lib_objects

# Main build
l = get_objs(env)
Alias('lib', l)
program = env.GoProgram(env.subst('$BIN_DIR/goray'), env.subst('$BUILD_DIR/main.go'))

Default(program)

# Test build
test_suite = test_env.GoProgram(
    test_env.subst('$BIN_DIR/tests'),
    test_env.GoTest(test_env.subst('$BUILD_DIR/tests.go'), get_objs(test_env))
)

Alias('tests', test_suite)
